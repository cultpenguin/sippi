<para>
SIPPI can be used as a convenient approach for unconditional an conditional simulation.
</para>
<para>
In order to use SIPPI to solve inverse problems, one must provide the solution to the forward problem. Essentially this amounts to implementing a Matlab function that solves the <link linkend="chapforward">forward problem</link> in using a specific input/output format. If a solution to the forward problem already exist, this can be quite easily done simply using a Matlab wrapper function. 
<!-- <link linkend="sippi_forward">forward problem</link> -->
</para>
<para>
A few implementations of solutions to forward problems are included as examples as part of SIPPI. These will be demonstrated in the following 
</para>
<!-- PRIOR EXAMPLES -->
<sect1 xml:id="sec_ex_prior"><title>Examples of A priori models</title>
<para></para>

<sect2 xml:id="sec_ex_prior_multi_1d_gauss"><title>Multiple 1D Gaussian prior model</title>
<para>
A prior model consisting of three independent 1D distributions (a Gaussian, Laplace, and Uniform distribution) can be defined using
</para>
<screen>
ip=1;
prior{ip}.type='GAUSSIAN';
prior{ip}.name='Gaussian';
prior{ip}.m0=10;
prior{ip}.std=2;

ip=2;
prior{ip}.type='GAUSSIAN';
prior{ip}.name='Laplace';
prior{ip}.m0=10;
prior{ip}.std=2;
prior{ip}.norm=1;

ip=3;
prior{ip}.type='GAUSSIAN';
prior{ip}.name='Uniform';
prior{ip}.m0=10;
prior{ip}.std=2;
prior{ip}.norm=60;

m=sippi_prior(prior);

m = 

    [14.3082]    [9.4436]    [10.8294]
</screen>
<para>1D histograms of a sample (consisting of 1000 realizations) of the prior models can be visualized using ...
</para>
<screen>
sippi_plot_prior_sample(prior);
</screen>
</sect2>

<sect2 xml:id="sec_ex_prior_multi_fft_ma_cov"><title>Multivariate Gaussian prior with unknown covariance model properties.</title>
<para>
The <link linkend="prior_fftma">FFT-MA</link> type a priori model allow separation of properties of the covariance model (covariance parameters, such as range, and anisotropy ratio) and the random component of a Gaussian model. This allow one to define a Gaussian a priori model, where the covariance parameters can be treated as unknown variables.
</para>
<para>
In order to treat the covariance parameters as unknowns, one must define one a priori model of type <varname>FFTMA</varname>, and then a number of 1D <varname>GAUSSIAN</varname> type a priori models, one for each covariance parameter. Each gaussian type prior model must have a descriptive name, corresponding to the covariance parameter that is should describe: 
<screen>
prior{im}.type='gaussian';
prior{im}.name='m_0';     % to define a prior for the mean 
prior{im}.name='sill';    % to define a prior for sill (variance)
prior{im}.name='range_1'; % to define a prior for the range parameter 1
prior{im}.name='range_2'; % to define a prior for the range parameter 2
prior{im}.name='range_3'; % to define a prior for the range parameter 3
prior{im}.name='ang_1';   % to define a prior for the first angle of rotation
prior{im}.name='ang_2';   % to define a prior for the second angle of rotation
prior{im}.name='ang_3';   % to define a prior for the third angle of rotation
prior{im}.name='nu';      % to define a prior for the shape parameter, nu 
			  %   (only applies when the Mater type Covariance model is used)
</screen>
</para>
<para>
A very simple example of a prior model defining a 1D Spherical type covariance model with a range between 5 and 15 meters, can be defined using: 
<screen>
im=1; 
prior{im}.type='FFTMA';
prior{im}.x=[0:.1:10]; % X array 
prior{im}.m0=10;
prior{im}.Va='1 Sph(10)';
prior{im}.fftma_options.constant_C=0;


im=2;
prior{im}.type='gaussian';
prior{im}.name='range_1';
prior{im}.m0=10;
prior{im}.std=5
prior{im}.norm=80;
prior{im}.prior_master=1; % -- NOTE, set this to the FFT-MA type prior for which this prior type
                          % should describe the range
</screen> 
</para>
<para>
Note that the the field <varname>prior_master</varname> must be set to point the to the FFT-MA type a priori model (through its id/number) for which it should define a covariance parameter (in this case the range). 
</para>
<para>
10 independent realizations of this type of a priori model are shown in the following figure
</para>
   <mediaobject>
      <imageobject condition="web">
	    <imagedata fileref="figures/prior_reals_fftma_1d_range.png" width="70%" scalefit="1"/>
		</imageobject>
      <textobject><phrase></phrase></textobject>
    </mediaobject>

<para>
Such a prior, as all prior models available in SIPPI, works with <link linkend="sec_seq_gibbs">sequential Gibbs sampling</link>, allowing a random walk in the space of a prior acceptable models, that will sample the prior model. An example of such a random walk can be performed using
<screen>
prior{1}.seq_gibbs.step=.005;
prior{2}.seq_gibbs.step=0.1;
clear m_real;
for i=1:150;
    [m,prior]=sippi_prior(prior,m);
    m_real(:,i)=m{1};
end
</screen>
An example of such a set of 150 dependent realization of the prior can be seen below
</para>
<mediaobject>
      <imageobject condition="web">
	    <imagedata fileref="figures/prior_reals_fftma_1d_range_waterfall.png" width="70%" scalefit="1"/>
		</imageobject>
      <textobject><phrase></phrase></textobject>
    </mediaobject>

	
</sect2>

</sect1>

<!-- POLY LINE FITTING -->
<sect1 xml:id="sec_ex_linefit"><title>Polynomial line fitting</title>
<para>
Here follows simple polynomial (of order 0, 1 or 2) line-fitting is considered. Example m-files can be found in the <filename>SIPPI/examples/case_linefit</filename> folder.
</para>
<para>
First, the forward problem is defined. Then examples of stochastic inversion using SIPPI is demonstrated using a a synthetic data set.
</para>

<sect2 xml:id="linefit_forward"><title>The forward problem</title>
<para>
The forward problem consists of computing the y-value as a function of the x-position of the data, and the polynomial coefficients determining the line. <link linkend="sippi_forward_linefit">sippi_forward_linefit.m</link>:
<screen xml:id="sippi_forward_linefit">
% sippi_forward_linefit Line fit forward solver for SIPPI 
%
% [d,forward,prior,data]=sippi_forward_linefit(m,forward,prior,data);
%
function [d,forward,prior,data]=sippi_forward_linefit(m,forward,prior,data);

if length(m)==1;
    d{1}=forward.x*m{1};
elseif length(m)==2;
    d{1}=forward.x*m{1}+m{2};
else
    d{1}=forward.x.^2*m{1}+forward.x*m{2}+m{3};
end
</screen>
the <varname>forward.x</varname> must be an array of the x-locations, for which the y-values of the corresponding line will be evaluated.
</para>
<para>
Note that the prior must be defined such that <varname>prior{1}</varname> refer to the intercept, <varname>prior{2}</varname> to the gradient, and <varname>prior{3}</varname> to the 2nd order polynomial coefficient.
</para>
<para>
If only one prior type is defined then the forward response will just be a constant, and if two prior types are defined, then the forward response will be a straight line.
</para>

</sect2>


<sect2 xml:id="linefit_data"><title>Reference data, data, forward</title>
<para>
A reference data set can be computed using 
</para>
<screen>
clear all;close all;
rand('seed',1);randn('seed',1);

%% Select reference model
m_ref{1}=-30;
m_ref{2}=2;
m_ref{3}=0; 

%% Setup the forward model in the 'forward' structure
nd=40;
forward.x=linspace(1,20,nd);
forward.forward_function='sippi_forward_linefit';

%% Compute a reference set of observed data
d=sippi_forward(m_ref,forward);
d_obs=d{1};
d_std=10;
d_obs=d_obs+randn(size(d_obs)).*d_std;

data{1}.d_obs=d_obs;
data{1}.d_std=d_std;
</screen>
   <mediaobject>
      <imageobject condition="web">
	    <imagedata fileref="figures/sippi_linefit_data_40.png" width="40%" scalefit="1"/>
		</imageobject>
      <textobject><phrase></phrase></textobject>
    </mediaobject>

</sect2>

<sect2><title>The prior model</title>
<para>
</para>
<screen>
%% Setting up the prior model

% the intercept
im=1;
prior{im}.type='gaussian';
prior{im}.name='intercept';
prior{im}.m0=0;
prior{im}.std=30;
prior{im}.m_true=m_ref{1};

% 1st order, the gradient
im=2;
prior{im}.type='gaussian';
prior{im}.name='gradient';
prior{im}.m0=0;
prior{im}.std=4;
prior{im}.norm=80;
prior{im}.m_true=m_ref{2};

% 2nd order
im=3;
prior{im}.type='gaussian';
prior{im}.name='2nd';
prior{im}.m0=0;
prior{im}.std=1;
prior{im}.norm=80;
prior{im}.m_true=m_ref{3};

sippi_plot_prior_sample(prior);
</screen>
<mediaobject>
      <imageobject condition="web">
	    <imagedata fileref="figures/sippi_line_fit_m1_3_prior_sample.png" width="100%" scalefit="1"/>
		</imageobject>
      <textobject><phrase></phrase></textobject>
    </mediaobject>

</sect2>
   
<sect2><title>Setup and run the Metropolis sampler</title>
<para>
Now, information about the model parameters can be inferred by running the <link linkend="sec_extendedmetropolis">extended Metropolis sampler</link> using
</para>   
<screen>
options.mcmc.nite=40000;  % Run for 40000 iterations
options.mcmc.i_sample=50; % Save every 50th visited model to disc
options.mcmc.i_plot=2500; % Plot the progress information for every 2500 iterations
options.txt='case_line_fit_2nd_order'; % descriptive name for the output folder

[options]=sippi_metropolis(data,prior,forward,options);

% plot posterior statistics, such as 1D and 2D marginals from the prior and posterior distributions
sippi_plot_prior_sample(options.txt);
sippi_plot_posterior(options.txt);
20140521_1644_sippi_metropolis_case_line_fit_2nd_order_m1_3_posterior_sample.png
</screen>


 <mediaobject><imageobject condition="web">
	    <imagedata fileref="figures/20140521_1644_sippi_metropolis_case_line_fit_2nd_order_m1_3_posterior_sample.png" width="100%" scalefit="1"/>
		</imageobject>
      <textobject><phrase>1D marginal a priori and posteriori distributions</phrase></textobject>
 </mediaobject>

<mediaobject><imageobject condition="web">
	    <imagedata fileref="figures/20140521_1644_sippi_metropolis_case_line_fit_2nd_order_post_marg_hist.png" width="70%" scalefit="1" align="center"/>
		</imageobject>
      <textobject><phrase>2D marginal a posteriori distributions</phrase></textobject>
 </mediaobject>

 
</sect2>

<sect2><title>Setup and run the rejection sampler</title>
<para>
In a similar manner the <link linkend="sec_rejection">rejection sampler</link> can be setup and run using 
</para>
<screen>
options.mcmc.adaptive_rejection=1; % automatically adjust the normalizing likelihood
options.mcmc.nite=100000;
options=sippi_rejection(data,prior,forward,options);
</screen>

</sect2>

</sect1>

<!--
<sect1 xml:id="sec_ex_covariance_inference"><title>Covariance model inference</title>
<para>
</para>
</sect1>
-->

<!-- Chapter on cross hole tomography -->
&chapCrossHoleTomography;



<!-- Chapter on probabilistic covariance/semivariogram inference -->
&chapCovarianceInference;



<!--
<sect1 xml:id="sec_ex_reflection"><title>Reflection seismic inversion</title>
<para>
</para>
</sect1>
-->
