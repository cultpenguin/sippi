
<sect1 xml:id="chapprior"><title>The a priori model</title>
<para>
A priori information is defined by the <varname>prior</varname> Matlab structure. Any mumber of types of a priori models can be defined. For example a 1D uniform prior can be defined in <varname>prior{1}</varname>, and 2D Gaussian prior can be defined in <varname>prior{2}</varname>.   
</para>
<para>
Once a prior data stricture has been defined, a realization from the prior model can be generated using 
<screen>
m=sippi_prior(prior);
</screen>
The realization from the prior can be visualized using 
<screen>
sippi_plot_prior(prior);
sippi_plot_prior(prior,m);
</screen>
A sample from the prior can be visualized using
<screen>
m=sippi_plot_prior_sample(prior);
</screen>
</para>
<para>
Each prior type is defined by setting a number field in the <varname>prior</varname> Matlab structure. For example, an decsriptive name (which is can be optionallyt set) decsribing the prior can be set in the <varname>name</varname> field, e.g.
<screen>
prior{1}.name='My Prior';
</screen>
</para>

<sect2 xml:id="prior_types"><title>Types of a priori models</title>
<para>
5 types of a priori models are available, and can be selected by setting the <varname>type</varname> in the <varname>prior</varname> structure using e.q. <varname>prior{1}.type='gaussian'</varname>.  
</para>
<para>
</para>
<para>
The <link linkend="prior_gaussian">GAUSSIAN</link> type prior specifes a 1D generalized Gaussian model.
</para>
<para>
The <link linkend="prior_fftma">FFTMA</link> specifes 1D-3D Gaussian Gaussian modelm using efficient unconditional sampling,
</para>
<para>
The <link linkend="prior_visim">VISIM</link> type prior model specifes a 1D-3D Gaussian Gaussian model, utilizing both sequential Gaussian simulation and direct sequential simulation, and conditioning the data of point support and linear average data. 
</para>
<!--
<para>
The <link linkend="prior_sisim">SISIM</link> type prior model specifes a 1D-3D prior model based on Gaussian indicator statistics. This type of prior requires <link linkend="SGEMS">SGEMS</link> to be installed.
</para>
-->
<para>
The <link linkend="prior_snesim">SNESIM</link> type prior model specifes a 1D-3D multiple point statistical model, relying on traning images to infer a model multiple point statistics. This type of prior requires <link linkend="SGEMS">SGEMS</link> to be installed.
</para>
<para>
The following section documents the properties of each type of prior model.
</para>
<para>
Examples of different types of (combinations of) a priori model can be found in the <link linkend="sec_ex_prior">examples section</link>. 
</para>

<!-- GAUSSIAN -->
<sect3 xml:id="prior_gaussian"><title>1D Generalized Gaussian</title>
<para>
A 1D generalized Gaussian prior model can be specified using the 'gaussian' type prior model
</para>
<screen>
prior{1}.type='gaussian';
</screen>

<para>
A simple 1D Gaussian distribution with mean 10, and standard deviation 2, can be specified using
</para>
<screen>
ip=1;
prior{ip}.type='gaussian';
prior{ip}.m0=10;
prior{ip}.std=2;
</screen>

<para>
The norm of a generalized Gaussian can be set using the 'norm' field. A generalized 1D Gaussian with mean 10, standard devation of 2, and a norm of 70, can be specified using 
(The norm is equivelent ot the beta factor referenced in <link xlink:href="http://en.wikipedia.org/wiki/Generalized_normal_distribution">Wikipedia:Generalized_normal_distribution</link>)
</para>
<screen>
ip=2;
prior{ip}.type='gaussian';
prior{ip}.m0=10;
prior{ip}.std=2;
prior{ip}.norm=70;
</screen>

<para>
A 1D distribution with an arbitrary distrution shape, can be defined by setting <varname>d_target</varname>, which must contain a sample of the distribtion that onw would like to replicate. For example, to generate a sample from a non-symmetric bimodal distrbution, one can use e.g.
</para>
<screen>
% Create target distribution
N=10000;
prob_chan=0.3;
d1=randn(1,ceil(N*(1-prob_chan)))*.5+8.5;
d2=randn(1,ceil(N*(prob_chan)))*.5+11.5;
d_target=[d1(:);d2(:)];

% set the target distribution
ip=3;
prior{ip}.type='gaussian';
prior{ip}.d_target=d_target;
</screen>
<para>
The following figure shows the 1D histrogram of a sample, consisting of 8000 realizations, generated using 
<screen>
sippi_plot_prior_sample(prior,1:ip,8000);
</screen>
</para>
   <mediaobject>
      <imageobject condition="web">
	    <imagedata fileref="figures/prior_gaussian_1d.png" width="100%" scalefit="1"/>
<!--
        <imagedata fileref="figures/prior_gaussian_normal.png" width="33%" scalefit="1"/>
        <imagedata fileref="figures/prior_gaussian_generalized.png" width="33%" scalefit="1"/>
        <imagedata fileref="figures/prior_gaussian_target.png" width="33%" scalefit="1"/>
-->
		</imageobject>
      <textobject><phrase></phrase></textobject>
    </mediaobject>




</sect3>


<sect3 xml:id="prior_fftma"><title>FFTMA - 3D Gaussian model</title>
<para>
The FFT moving average method provides an efficient approach for computing unconditional realizations of a Gaussian random field.
</para>
<para>
A 2D covariance model with mean 10, and a Spherical type covariance model can be defined in a 101x101 size grid (1m between cells) using
</para>
<screen>
im=1;
prior{im}.type='FFTMA';
prior{im}.x=[0:1:100];
prior{im}.y=[0:1:100];
prior{im}.m0=10;
prior{im}.Cm='1 Sph(10)';
</screen>
   <mediaobject>
      <imageobject condition="web">
        <imagedata fileref="figures/prior_fftma_2d_gaussian.png" width="100%" scalefit="1"/>
      </imageobject>
      <textobject><phrase></phrase></textobject>
    </mediaobject>

<para>
Optionally one can translate the output of the Gaussian simulation into an arbitrarily shaped 'target' distribution, using normal score transformation. Note that this transformation will ensure a certin distribtion, but will alter the assumed covariance model, such the covariance model properties are no longer esnured. To ensure the covariance model properties are honored, make use of the VISIM type prior model. 
</para>
<screen>
im=1;
prior{im}.type='FFTMA';
prior{im}.x=[0:1:100];
prior{im}.y=[0:1:100];
prior{im}.m0=10;
prior{im}.Cm='1 Sph(10)';

% Create target distribution
N=10000;
prob_chan=0.5;
d1=randn(1,ceil(N*(1-prob_chan)))*.5+8.5;
d2=randn(1,ceil(N*(prob_chan)))*.5+11.5;
d_target=[d1(:);d2(:)];
prior{im}.d_target=d_target;
</screen>
<para>
Alternatively, the normal score transformation can be defined manually to control tail behaviour using
</para>
<screen>
N=10000;
prob_chan=0.5;
d1=randn(1,ceil(N*(1-prob_chan)))*.5+8.5;
d2=randn(1,ceil(N*(prob_chan)))*.5+11.5;
d_target=[d1(:);d2(:)];
[d_nscore,o_nscore]=nscore(d_target,1,1,min(d_target),max(d_target),0);
prior{im}.o_nscore=o_nscore;
</screen>
   <mediaobject>
      <imageobject condition="web">
        <imagedata fileref="figures/prior_fftma_2d_target.png" width="100%" scalefit="1"/>
      </imageobject>
      <textobject><phrase></phrase></textobject>
    </mediaobject>
	
</sect3>

<sect3 xml:id="prior_visim"><title>VISIM</title>
<para>
</para>
<screen>
im=im+1;
prior{im}.type='VISIM';
prior{im}.x=[0:1:100];
prior{im}.y=[0:1:100];
prior{im}.m0=10;
prior{im}.Cm='1 Sph(10)';
</screen>
   <mediaobject>
      <imageobject condition="web">
        <imagedata fileref="figures/prior_visim_2d_gaussian.png" width="100%" scalefit="1"/>
      </imageobject>
      <textobject><phrase></phrase></textobject>
    </mediaobject>
<para>
As with the FFTMA type prior the VISIM type prior can make use of a target distribution. However, if a target distribution is set, the use of the VISIM type prior will utilize direct sequential simulation, which will ensure both histogram and covariance reproduction. 
</para>
<para>
Except for the <varname>type</varname> the use of a target distribtion is similat to that of the FFTMA type prior
</para>
<screen>
clear all;close all;
im=1;
prior{im}.type='VISIM';
prior{im}.x=[0:1:40];
prior{im}.y=[0:1:40];
prior{im}.m0=10;
prior{im}.Cm='1 Sph(10)';

% Create target distribution
N=10000;
prob_chan=0.5;
d1=randn(1,ceil(N*(1-prob_chan)))*.5+8.5;
d2=randn(1,ceil(N*(prob_chan)))*.5+11.5;
d_target=[d1(:);d2(:)];
prior{im}.d_target=d_target;
</screen>
  <mediaobject>
      <imageobject condition="web">
        <imagedata fileref="figures/prior_visim_2d_target.png" width="100%" scalefit="1"/>
      </imageobject>
      <textobject><phrase></phrase></textobject>
    </mediaobject>



<sect4 xml:id="prior_visim_2d"><title>VISIM:2D</title>
<para></para>
<screen>
im=im+1;
prior{im}.type='VISIM';
prior{im}.x=[0:1:100];
prior{im}.y=[0:1:100];
prior{im}.m0=10;
prior{im}.Cm='1 Sph(10)';
</screen>
</sect4>


</sect3>


<sect3 xml:id="prior_sisim"><title>SISIM</title>
<para></para>
</sect3>

<sect3 xml:id="prior_snesim"><title>SNESIM</title>
<para></para>
</sect3>

</sect2>

<sect2 xml:id="prior_sampling"><title>Sampling the prior</title>
<para>
Once the prior data structure has been defined a sample from the prior distribution can be generated using 
<screen>
m=sippi_prior(prior);
</screen>
'm' is a Matlab data structure of the same size as the 'prior' data structure. Thus, if two prior distributions have been defined in 'prior{1}' and 'prior{2}', then 'm{1}' will hold a realization of 'prior{1}', 
and 'm{2}' will hold a realization of 'prior{2}'. 
</para>
<para>
Each time 'm=sippi_prior(prior)' is called, a new independant realization of the prior will be generated.
</para>

</sect2>

<sect2 xml:id="sec_seq_gibbs"><title>Sequential Gibbs sampling / Conditional Resampling</title>
<para>
All the available a priori types available allow perturbing one realization of a prior into a new realization of prior, in the vicinity of the first one. To do this we make use of sequential Gibbs sampling <citation>HCM12</citation>. Sequential Gibbs in essence is a type of conditional resampling. From a current realization of a prior, a number of model parameters are discarded and treated as unknown, and the simulated conditional to the fixed values of the model parameters.  
</para>
<para>
In order to generate a new realiztion 'm2' in the viciinity of the realization 'm1' use
<screen>
m1=sippi_prior(prior);
[m2,prior]=sippi_prior(prior,m1);
</screen>
If this process is iterated, then a random walk in the space of a priori acceptable models will be perform. And, the collection of realization obatined, will represent a sample from prior distribution.  
</para>




<sect3 xml:id="sec_seq_gibbs_step"><title>Controlling sequential Gibbs sampling / Conditional Resampling</title>
<para>
All properties related to sequential Gibbs sampling can be set in the 'seq_gibbs' data struture, for each prior type. The follwing two parameters determined how the a current model is perturbed
</para>
<screen>
prior{m}.seq_gibbs.step=1;
prior{m}.seq_gibbs.type=2;
</screen>
</sect3>
</sect2>


</sect1>

<sect1 xml:id="chapdata"><title>The data and the noise</title>
<para>
</para>
</sect1>

<sect1 xml:id="chapforward"><title>The forward model</title>
<para>
</para>
</sect1>
